<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>David Talbot</title><link href="http://niceguydave.github.io/" rel="alternate"></link><link href="http://niceguydave.github.io/feeds/web-development.atom.xml" rel="self"></link><id>http://niceguydave.github.io/</id><updated>2015-08-24T11:30:00+01:00</updated><entry><title>Django - unexpected behaviour when deleting optional fields</title><link href="http://niceguydave.github.io/unexpected-behaviour-deleting-optional-fields.html" rel="alternate"></link><updated>2015-08-24T11:30:00+01:00</updated><author><name>niceguydave</name></author><id>tag:niceguydave.github.io,2015-08-24:unexpected-behaviour-deleting-optional-fields.html</id><summary type="html">&lt;p&gt;I've just come out of a situation where data has been deleted from a site
I'm responsible for - I wasn't expecting this to happen when writing the 
schema so I thought it worthwhile adding here in the event that it helps
anyone else who may be in the same situation&lt;/p&gt;
&lt;p&gt;The scenario was adding an optional field to to a Django &lt;a href="http://django-filer.readthedocs.org/en/latest/usage.html#filerfilefield-and-filerimagefield"&gt;FilerImageField&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A simplification of my model is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;filer.fields.image&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FilerImageField&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FilerImageField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Image should be at least 200 x 100px.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;My initial thoughts on this were, "it's an optional field so it shouldn't 
matter whether the &lt;code&gt;image&lt;/code&gt; instance referred to is deleted from the library.&lt;/p&gt;
&lt;p&gt;It does.&lt;/p&gt;
&lt;p&gt;When deleting anything, the default behaviour of any foreign keys 
&lt;a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/#django.db.models.ForeignKey.on_delete"&gt;emulates the behavior of the SQL constraint ON DELETE 
CASCADE&lt;/a&gt;, 
which is to say, even though an &lt;code&gt;image&lt;/code&gt; exists in an instance of &lt;code&gt;Foo&lt;/code&gt;, 
and is optional, the fact that it has a foreign key relationship to the
&lt;code&gt;FilerImageField&lt;/code&gt; instance means that the &lt;code&gt;Foo&lt;/code&gt; instance will, be default,
 be deleted.&lt;/p&gt;
&lt;p&gt;To resolve this issue, in my case, I changed the &lt;code&gt;on_delete&lt;/code&gt; attribute for my
&lt;code&gt;image&lt;/code&gt; field to set the value of &lt;code&gt;image&lt;/code&gt; to be
&lt;a href="https://docs.djangoproject.com/en/1.8/ref/models/fields/#django.db.models.SET_NULL"&gt;NULL&lt;/a&gt; in the event that the 
connected &lt;code&gt;FilerFieldImage&lt;/code&gt; field were deleted.&lt;/p&gt;
&lt;p&gt;The code therefore was rewritten to look as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;filer.fields.image&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FilerImageField&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;      
    &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FilerImageField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;blank&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;help_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Image should be at least 200 x 100px.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;on_delete&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SET_NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="django"></category></entry><entry><title>Resetting a Django app managed by South</title><link href="http://niceguydave.github.io/resetting-a-django-app-managed-by-south.html" rel="alternate"></link><updated>2014-10-04T10:40:00+01:00</updated><author><name>niceguydave</name></author><id>tag:niceguydave.github.io,2014-10-04:resetting-a-django-app-managed-by-south.html</id><summary type="html">&lt;p&gt;I'm currently working on a Django 1.6 project. The project is still in
the early phases of development and I have the luxury of being able to
be fairly destructive when it comes to dropping models and repopulating
data etc.&lt;/p&gt;
&lt;p&gt;Before too long, however, I'll have to start doing some deployment for
client approval, so I already have the app I'm working on hooked up to
&lt;a href="http://south.readthedocs.org/en/latest/tutorial/part1.html"&gt;South&lt;/a&gt; as a
way of controlling schema and data migrations. I tend not to like using
migrations too much in the early stages of development, purely because
I'm potentially still 'playing around' at this stage, rather than
committing planned changes.&lt;/p&gt;
&lt;p&gt;Now that I'm hooked into using South, simply dropping things and
starting again is a little more involved. What this post does is explain
how I drop an app which uses South and recreate again. For this example,
I'll assume that I'm working on an app called &lt;code&gt;blog&lt;/code&gt; using a postgres
database called &lt;code&gt;website_db&lt;/code&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First of all, I reset the migrations for the &lt;code&gt;blog&lt;/code&gt; app to zero:
    &lt;code&gt;./manage.py migrate blog zero&lt;/code&gt; What this does is remove any
    reference to the &lt;code&gt;blog&lt;/code&gt; app from the south migration database table,
    forcing an migration to look into the files within the migrations
    folder in my &lt;code&gt;blog&lt;/code&gt; app.&lt;/li&gt;
&lt;li&gt;Now I drop any database tables referred to by the blog app by piping
    the sqlclear command to the psql command:
    &lt;code&gt;./manage.py sqlclear blog | psql website_db&lt;/code&gt;. This physically drops
    all database tables related to this app. &lt;em&gt;Warning: all your data
    will be lost when you do this!&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The next steps is to entirely remove the migrations folder from the
    &lt;code&gt;blog&lt;/code&gt; app to prepare the way for refreshing things in the next
    step: &lt;code&gt;rm -rf blog/migrations/&lt;/code&gt;. We are now effectively back at a
    'blank page' with regards to this app.&lt;/li&gt;
&lt;li&gt;To hook the app back up again to South, I now convert the blog app
    to South (any changes to the schema etc. would ideally be done
    before this stage. I convert my app to South by running:
    &lt;code&gt;./manage.py convert_to_south blog&lt;/code&gt;. This command builds the schema
    migration into the &lt;code&gt;blog/migrations&lt;/code&gt; folder.&lt;/li&gt;
&lt;li&gt;Now I run the migration: &lt;code&gt;./manage.py migrate blog&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Obviously, there is now no data in this app so my next step is run a
data population script. I'll outline the way I do this in a future post.&lt;/p&gt;
&lt;p&gt;I know that nothing of what I've written above is new in any way; I
thought it would simply be useful to lay out my process in a clear way.
Hopefully it may help someone out.&lt;/p&gt;</summary><category term="django"></category><category term="south"></category></entry><entry><title>Enabling native spell checking with Django-CMS 3</title><link href="http://niceguydave.github.io/enabling-native-spell-checking-with-django-cms-3.html" rel="alternate"></link><updated>2014-09-22T11:54:00+01:00</updated><author><name>niceguydave</name></author><id>tag:niceguydave.github.io,2014-09-22:enabling-native-spell-checking-with-django-cms-3.html</id><summary type="html">&lt;p&gt;We use Django-CMS extensively at the company I work for,
&lt;a href="http://www.pancentric.com/" title="Pancentric"&gt;Pancentric&lt;/a&gt;. I was recently
given what, at first, seemed to be a fairly simple request: ensure that
any misspelled words are highlighted within the default text editor.&lt;/p&gt;
&lt;p&gt;I'm fairly new to &lt;a href="http://ckeditor.com/" title="CKEditor"&gt;CKEditor&lt;/a&gt; and
although I'm liking using it so far, there are a certain number of
features which make things... awkward. Spell checking is one of them.&lt;/p&gt;
&lt;p&gt;The toolbar has a number of sensible defaults which can be seen in the
image below.  Notice that, although the last three words are misspelled,
there is no visual indication of this.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_136" align="alignnone" width="1008"]&lt;a href="http://niceguydave.files.wordpress.com/2014/09/toolbar_pre_config.png"&gt;&lt;img alt="Default
CKEditor
layout" src="http://niceguydave.files.wordpress.com/2014/09/toolbar_pre_config.png" /&gt;&lt;/a&gt;
Default CKEditor layout[/caption]&lt;/p&gt;
&lt;p&gt;You'll notice that what I &lt;em&gt;don't&lt;/em&gt; have here is either a spell-check
button or the ability to see any misspelled words highlighted within the
text editor itself.&lt;/p&gt;
&lt;p&gt;After digging around for a while, it seemed that many of the
recommendations for including a spell checker directed me to using a
licensed plugin, something which I didn't want or need; I just wanted to
enable the context menu to highlight misspelled words. Moreover, the
context menu had been hijacked too, which stopped me from right-clicking
on a word to get a context-specific menu.&lt;/p&gt;
&lt;p&gt;In the end, after a bit of searching and finding some useful posts about
the same issue (like &lt;a href="http://murfitt.net/blog/getting-browser-spell-checker-work-ckeditor-drupal"&gt;this
one&lt;/a&gt;
and &lt;a href="http://stackoverflow.com/questions/2682042/ckeditor-using-firefox-built-in-spellchecker"&gt;this
one&lt;/a&gt;)
I was able to hack together the following configuration. This sits
within my &lt;code&gt;settings.py&lt;/code&gt; file and gives a minimal working solution which
allows misspelled words to be highlighted within the text editor and
which doesn't force me to install any additional spell checking plugins:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;CKEDITOR_SETTINGS = {  
    &amp;#39;disableNativeSpellChecker&amp;#39;: False,  
    &amp;#39;removePlugins&amp;#39;: &amp;#39;contextmenu,liststyle,tabletools&amp;#39;,  
    &amp;#39;toolbar_CMS&amp;#39;: [  
        [&amp;#39;Undo&amp;#39;, &amp;#39;Redo&amp;#39;],  
        [&amp;#39;cmsplugins&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;PasteText&amp;#39;,],  
        [&amp;#39;Format&amp;#39;, &amp;#39;NumberedList&amp;#39;,&amp;#39;BulletedList&amp;#39;,],  
        [&amp;#39;Bold&amp;#39;, &amp;#39;Italic&amp;#39;, &amp;#39;Underline&amp;#39;, &amp;#39;-&amp;#39;, &amp;#39;RemoveFormat&amp;#39;],  
        [&amp;#39;Source&amp;#39;, &amp;#39;ShowBlocks&amp;#39;,]  
    ],  
}  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Some notes on what I've done here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;By default, &lt;a href="http://docs.ckeditor.com/#!/guide/dev_spellcheck"&gt;&lt;code&gt;disableNativeSpellChecker&lt;/code&gt; is set to
    &lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, so I
    needed to override this behaviour.&lt;/li&gt;
&lt;li&gt;I only actually needed to remove &lt;code&gt;contextmenu&lt;/code&gt; from the
    &lt;code&gt;removePlugins&lt;/code&gt; attribute: &lt;code&gt;liststyle&lt;/code&gt; and &lt;code&gt;tabletools&lt;/code&gt; depend upon
    &lt;code&gt;contextmenu&lt;/code&gt;, so they needed to come out, too.&lt;/li&gt;
&lt;li&gt;The additional &lt;code&gt;'toolbar_CMS'&lt;/code&gt; config is not part of the problem
    above but illustrates how I've reduced the number of tool bar items
    to a sensible minimum in the image below&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The final appearance of the editor after the changes have been made is
as below.  Notice the final three nonsense words highlighted as
misspelled (I'm using Chrome ):&lt;/p&gt;
&lt;p&gt;[caption id="attachment_135" align="alignnone" width="1008"]&lt;a href="http://niceguydave.files.wordpress.com/2014/09/toolbar_post_config.png"&gt;&lt;img alt="CKEditor
toolbar after configuring native browser spell
checking" src="http://niceguydave.files.wordpress.com/2014/09/toolbar_post_config.png" /&gt;&lt;/a&gt;
CKEditor toolbar after configuring native browser spell
checking[/caption]&lt;/p&gt;</summary><category term="cms"></category><category term="django"></category><category term="django-cms"></category></entry><entry><title>Django - testing model methods</title><link href="http://niceguydave.github.io/django-testing-for-integrity-errors.html" rel="alternate"></link><updated>2014-04-25T09:10:00+01:00</updated><author><name>niceguydave</name></author><id>tag:niceguydave.github.io,2014-04-25:django-testing-for-integrity-errors.html</id><summary type="html">&lt;p&gt;I recently stumbled upon a "gotcha" which may help someone else testing
Django model methods.&lt;/p&gt;
&lt;p&gt;An overview: I recently found myself in a situation where I needed to
ensure that the &lt;code&gt;slug&lt;/code&gt; field on a model was unique.&lt;/p&gt;
&lt;p&gt;A simplification of the model is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;\&lt;span class="n"&gt;_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In terms of how to test this change to the model, my initial thoughts
were that things should be fairly simple: create an object with a
specific &lt;code&gt;slug&lt;/code&gt; and then create another object with the same &lt;code&gt;slug&lt;/code&gt;,
expecting an &lt;code&gt;IntegrityError&lt;/code&gt; to be raised. As such, my approach was to
write the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.db&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IntegrityError&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.test&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;  
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FooModelTest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_unique_slug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A slug should be unique.  &lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;  
    &lt;span class="n"&gt;f1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Foo1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="n"&gt;f1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  
    &lt;span class="n"&gt;f2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Foo2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;foo1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertRaises&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IntegrityError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, rather than checking that the &lt;code&gt;IntegrityError&lt;/code&gt; was being raised
was being raised, the &lt;code&gt;IntegrityError&lt;/code&gt; was called before the test could
run.&lt;/p&gt;
&lt;p&gt;What had happened was that, rather than passing the &lt;code&gt;save&lt;/code&gt; method itself
to &lt;code&gt;self.assertRaises&lt;/code&gt; I was calling &lt;code&gt;save()&lt;/code&gt; directly: an
&lt;code&gt;IntegrityError&lt;/code&gt; was being raised before the test had even been run,
rather than having the test itself check the &lt;code&gt;save&lt;/code&gt; method in the
assertion.&lt;/p&gt;
&lt;p&gt;To fix this, I removed the parentheses from &lt;code&gt;f2.save()&lt;/code&gt; i.e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;...  
self.assertRaises(IntegrityError, f2.save)  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then everything works exactly as expected.&lt;/p&gt;</summary><category term="django"></category><category term="testing"></category></entry></feed>